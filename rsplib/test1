#!/bin/bash

. ./planetlab-config

TESTID=messung1

PR_ASIA=`cat pr-asia.hosts`
PR_USA=`cat pr-usa.hosts`
PR_EUROPE=`cat pr-europe.hosts`
PR_ALL="$PR_ASIA $PR_USA $PR_EUROPE"
PR_MISCOPT="-loglevel=5"

PE_ASIA=`cat pe-asia.hosts`
PE_USA=`cat pe-usa.hosts`
PE_EUROPE=`cat pe-europe.hosts`
PE_ALL="$PE_ASIA $PE_USA $PE_EUROPE"
PE_MISCOPT="-calcapp -rereginterval=7500 -policy=LeastUsedDPF:0.00001 -capmaxjobs=10 -loglevel=5 "

PU_ASIA=`cat pu-asia.hosts`
PU_USA=`cat pu-usa.hosts`
PU_EUROPE=`cat pu-europe.hosts`
PU_ALL="$PU_ASIA $PU_USA $PU_EUROPU"
PU_MISCOPT="-jobinterval=5000000 -jobsize=1000000 -loglevel=5"


resetAll ()
{
   ./stop-processes Registrar
   ./stop-processes PoolElement
   ./stop-processes PoolUser
}

startNetwork ()
{
   echo "PRs=$localPRs"
   echo "PEs=$localPEs"

   optPeers=""
   for peer in $PR_ALL ; do
      optPeers="$optPeers -peer=$peer:3864"
   done
   number=1
   for pr in $localPRs ; do
      echo "Starting PR on $pr ..."
      ./start-process "Registrar-$number" "./rootshell -c \"./registrar $PR_MISCOPT -asap=0.0.0.0:3863 -enrp=0.0.0.0:3864 $optPeers $OPT_CSP\" >$TESTID-pr$number-$pr.log 2>&1" $pr &
      let number=$number+1
   done

   optRegistrars=""
   for pr in $localPRs ; do
      optRegistrars="$optRegistrars -registrar=$pr:3863"
   done
   number=1
   for pe in $localPEs ; do
      echo "Starting PE on $pe ..."
      ./start-process "PoolElement-$number" "./rootshell -c \"./server $PE_MISCOPT $optRegistrars -capvector=$TESTID-pe$number-$pe.vec -capscalar=$TESTID-pe$number-$pe.sca -capobject=PE-$number-$pe $OPT_CSP\" >$TESTID-pe$number-$pe.log 2>&1" $pe &
      let number=$number+1
   done

   number=1
   for pu in $localPUs ; do
      echo "Starting PU on $pu ..."
      ./start-process "PoolUser-$number" "./rootshell -c \"./calcappclient $PU_MISCOPT $optRegistrars -vector=$TESTID-pu$number-$pu.vec -scalar=$TESTID-pu$number-$pu.sca -object=PU-$number-$pu $OPT_CSP\" >$TESTID-pu$number-$pu.log 2>&1" $pu &
      let number=$number+1
   done
}

stopNetwork ()
{
   number=1
   for pu in $localPUs ; do
      ./stop-process "PoolUser-$number" $pu
      let number=$number+1
   done
   number=1
   for pe in $localPEs ; do
      ./stop-process "PoolElement-$number" $pe
      let number=$number+1
   done
   number=1
   for pr in $localPRs ; do
      ./stop-process "Registrar-$number" $pr
      let number=$number+1
   done
}



startNetworkAsia ()
{
   localPRs=$PR_ASIA
   localPEs=$PE_ASIA
   localPUs=$PU_ASIA
   startNetwork
}

startNetworkUSA ()
{
   localPRs=$PR_USA
   localPEs=$PE_USA
   localPUs=$PU_USA
   startNetwork
}

startNetworkEurope ()
{
   localPRs=$PR_EUROPE
   localPEs=$PE_EUROPE
   localPUs=$PU_EUROPE
   startNetwork
}


stopNetworkAsia ()
{
   localPRs=$PR_ASIA
   localPEs=$PE_ASIA
   localPUs=$PU_ASIA
   stopNetwork
}

stopNetworkUSA ()
{
   localPRs=$PR_USA
   localPEs=$PE_USA
   localPUs=$PU_USA
   stopNetwork
}

stopNetworkEurope ()
{
   localPRs=$PR_EUROPE
   localPEs=$PE_EUROPE
   localPUs=$PU_EUROPE
   stopNetwork
}


if [ $# -lt 1 ] ; then
   echo "Usage: test1 [start|stop|reset|results]"
fi

if [ "x$1" = "xstart" ] ; then
   echo "Starting scenario!"
   # startNetworkAsia
   startNetworkUSA
   startNetworkEurope
elif [ "x$1" = "xstop" ] ; then
   echo "Stopping scenario!"
   stopNetworkEurope
   stopNetworkUSA
   # stopNetworkAsia
elif [ "x$1" = "xreset" ] ; then
   echo "Reseting everything!"
   resetAll
elif [ "x$1" = "xresults" ] ; then
   echo "Fetching results!"
   # echo $PU_ALL $PE_ALL $PR_ALL | sort -u | xargs ./get-results $TESTID
   echo $PU_USA $PE_USA $PU_EUROPE $PE_EUROPE | sort -u | xargs ./get-results $TESTID
   ./combine-vectors $TESTID
else
   echo "ERROR: Bad parameter!"
fi
