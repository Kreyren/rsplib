#!/bin/bash
#
# Thomas Dreibholz's PlanetLab Script Collection
# Copyright (C) 2005-2007 by Thomas Dreibholz, dreibh@exp-math.uni-essen.de
#
# $Id$
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# Contact: dreibh@iem.uni-due.de
#

if [ $# -lt 8 ] ; then
   echo "Usage: perftest [Test Name] [Prefix] [PEs] [PUs] [ReregInterval] [InterHResTime] [MaxHResItems] [Duration]" >&2
   exit 1
fi


TESTNAME="$1"
PREFIX="$TESTNAME/$2"
PEs="$3"
PUs="$4"
REREGINTERVAL="$5"
INTERHRESTIME="$6"
MAXHRESITEMS="$7"
DURATION="$8"

POOLHANDLE="EchoPool"


HOST_PR="132.252.152.70"
HOST_LIST="132.252.152.71 132.252.152.72 132.252.152.73 132.252.152.78 132.252.152.79"
SSH_USER="student"
SSH_KEY=~/.ssh/id_dsa


PARAMS=$PREFIX-$PEs-$PUs-$REREGINTERVAL-$INTERHRESTIME-$MAXHRESITEMS-$DURATION



# ====== Choose host from HOST_LIST in round robin order ====================
CHOOSE_HOST=""
CHOOSE_HOST_LAST=0
choose_host ()
{
   oldGetHostLast=$CHOOSE_HOST_LAST
   CHOOSE_HOST_LAST=0
   for myHost in $HOST_LIST ; do
      if [ $CHOOSE_HOST_LAST -gt $oldGetHostLast ] ; then
         CHOOSE_HOST=$myHost
         return
      fi 
      let CHOOSE_HOST_LAST=$CHOOSE_HOST_LAST+1
   done

   for myHost in $HOST_LIST ; do
      CHOOSE_HOST=$myHost
      CHOOSE_HOST_LAST=0
      return
   done
}


# ====== Start process ======================================================
startproc ()
{
   PROCNAME=$1
   PROCCALL=$2
   SERVER=$3

   PIDFILE=$PROCNAME-$SERVER.pid
   if [ -e $PIDFILE ]; then
      echo "ERROR: PID file $PIDFILE already exists!"
      exit 1
   fi

   PIDFILE=$PROCNAME-$SERVER.pid
   ssh -t -t -C -i $SSH_KEY -oStrictHostKeyChecking=no -oPasswordAuthentication=no $SSH_USER@$SERVER "\
      cd src/rsplib2/rsplib && $PROCCALL" &
   echo $! >$PIDFILE
}


# ====== Stop process =======================================================
stopproc ()
{
   PROCNAME=$1
   SERVER=$2

   PIDFILE=$PROCNAME-$SERVER.pid
   if [ -e $PIDFILE ] ; then
      PID=`cat $PIDFILE`
      if ps -p `cat $PIDFILE` | grep ssh 1>/dev/null 2>/dev/null ; then
         echo "Processing $PIDFILE: sending SIGINT to $PID ..."
         kill $PID
      else
         echo "Processing $PIDFILE: process is already gone."
      fi
      rm $PIDFILE
   fi

}


# ====== Get file via scp ===================================================
fetchfile ()
{
   SERVER=$1
   INFILE=$2
   OUTFILE=$3
   scp -q -i $SSH_KEY $SSH_USER@$SERVER:"~/src/rsplib2/rsplib/$INFILE" $OUTFILE
}



# ====== Start scenario =====================================================
if [ ! -e "$TESTNAME" ] ; then
   mkdir "$TESTNAME"
fi
if [ -e "$PREFIX/completed.txt" ] ; then
   echo "##################################################"
   echo "$PREFIX is already there -> skipping!"
   echo "##################################################"
   exit 0
fi
rm -rf "$PREFIX"
mkdir "$PREFIX"

# ------ Stop all -----------------------------------------------------------
for HOST in $HOST_LIST ; do
   ssh -t -t -C -i $SSH_KEY -oStrictHostKeyChecking=no -oPasswordAuthentication=no $SSH_USER@$HOST_PR "\
      killall -KILL registrar hrestest server"
done
rm -f TestP?-*.pid

# ------ Start PR -----------------------------------------------------------
startproc "TestPR-1" "./registrar -asap=[::]:9001 -enrp=[::]:9002 -maxhresitems=$MAXHRESITEMS -loglevel=3 -statsfile=TestPR-1.data -statsinterval=250" $HOST_PR
sleep 10

# ------ Start PEs ----------------------------------------------------------
CHOOSE_HOST_LAST=0
i=1 ; while [ $i -le $PEs ] ; do
   choose_host
   startproc "TestPE-$i" "./server -registrar=$HOST_PR:9001 -poolhandle=$POOLHANDLE -rereginterval=$REREGINTERVAL -echo -policy=RoundRobin" $CHOOSE_HOST
   let i=$i+1
done

sleep 10

# ------ Start PUs ----------------------------------------------------------
CHOOSE_HOST_LAST=0
i=1 ; while [ $i -le $PUs ] ; do
   choose_host
   startproc "TestPU-$i" "./hrestest -registrar=$HOST_PR:9001 -poolhandle=$POOLHANDLE -pause=$INTERHRESTIME -quiet -statsfile=TestPU-$i.data -statsinterval=250" $CHOOSE_HOST
   let i=$i+1
done


# ====== Run tests ==========================================================
sleep $DURATION


# ====== Stop scenario ======================================================

# ------ Stop PUs -----------------------------------------------------------
CHOOSE_HOST_LAST=0
i=1 ; while [ $i -le $PUs ] ; do
   choose_host
   stopproc "TestPU-$i" $CHOOSE_HOST
   fetchfile $CHOOSE_HOST "TestPU-$i.data" "$PREFIX/TestPU-$i.data"
   let i=$i+1
done
sleep 1

# ------ Stop PEs -----------------------------------------------------------
CHOOSE_HOST_LAST=0
i=1 ; while [ $i -le $PEs ] ; do
   choose_host
   stopproc "TestPE-$i" $CHOOSE_HOST
   let i=$i+1
done
sleep 2

# ------ Stop PR ------------------------------------------------------------
stopproc "TestPR-1" $HOST_PR
fetchfile $HOST_PR "TestPR-1.data" "$PREFIX/TestPR-1.data"


date >"$PREFIX/completed.txt"
echo "Fertig!"
