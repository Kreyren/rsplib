#!/bin/bash
#
# Thomas Dreibholz's PlanetLab Script Collection
# Copyright (C) 2005-2007 by Thomas Dreibholz, dreibh@exp-math.uni-essen.de
#
# $Id$
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# Contact: dreibh@iem.uni-due.de
#

if [ $# -lt 8 ] ; then
   echo "Usage: perftest [Test Name] [Prefix] [PEs] [PUs] [ReregInterval] [InterHResTime] [MaxHResItems] [Duration]" >&2
   exit 1
fi


TESTNAME="$1"
PREFIX="$TESTNAME/$2"
PEs="$3"
PUs="$4"
REREGINTERVAL="$5"
INTERHRESTIME="$6"
MAXHRESITEMS="$7"
DURATION="$8"

POOLHANDLE="EchoPool"

HOST_PR="132.252.152.73"
HOST_LIST="132.252.152.70 132.252.152.71 132.252.152.72 132.252.152.78 132.252.152.79"

PARAMS=$PREFIX-$PEs-$PUs-$REREGINTERVAL-$INTERHRESTIME-$MAXHRESITEMS-$DURATION


# ====== Start scenario =====================================================
if [ ! -e "$TESTNAME" ] ; then
   mkdir "$TESTNAME"
fi
if [ -e "$PREFIX/completed.txt" ] ; then
   echo "##################################################"
   echo "$PREFIX is already there -> skipping!"
   echo "##################################################"
   exit 0
fi
rm -rf "$PREFIX"
mkdir "$PREFIX"

echo "   + Preparing test for the following parameters:"
echo "      - $PEs PEs, $PUs PUs"
echo "      - ReregInterval: $REREGINTERVAL [ms]"
echo "      - InterHResTime: $INTERHRESTIME [ms]"
echo "      - MaxHResItems:  $MAXHRESITEMS"
echo "      - Duration:      $DURATION [s]"
echo "      - $PEs PEs, $PUs PUs"
echo "      - $PEs PEs, $PUs PUs"


# ------ Stop all -----------------------------------------------------------
echo "   + Stopping all old stuff ..."
ALL_HOSTS="`echo $HOST_LIST $HOST_PR | sort -u`"
for HOST in $ALL_HOSTS ; do
   ssh -t -t -C -i $SSH_KEY -oStrictHostKeyChecking=no -oPasswordAuthentication=no $SSH_USER@$HOST "\
      killall -KILL registrar hrestest server"
done
rm -f TestP?-*.pid
echo "   + Ready. Waiting 5 seconds ..."
sleep 5

# ------ Start PR -----------------------------------------------------------
echo "   + Starting PR ..."
./RemoteComponentControl ./Lab-User.config $HOST_PR ./ComponentControl.config PR TestPR-1 start \
   -maxhresitems=$MAXHRESITEMS -loglevel=3 -statsfile=TestPR-1.data -statsinterval=250
sleep 10

# ------ Start PEs ----------------------------------------------------------
echo "   + Starting $PEs PEs ..."
CHOOSE_HOST_LAST=0
i=1 ; while [ $i -le $PEs ] ; do
   choose_host
   ./RemoteComponentControl ./Lab-User.config $CHOOSE_HOST ./ComponentControl.config PE TestPE-$i start \
      -loglevel=3 -statsfile=TestPR-1.data -statsinterval=250 \
      -poolhandle=$POOLHANDLE -rereginterval=$REREGINTERVAL -echo -policy=RoundRobin
   let i=$i+1
done

sleep 10

# ------ Start PUs ----------------------------------------------------------
echo "   + Starting $PUs PUs ..."
CHOOSE_HOST_LAST=0
i=1 ; while [ $i -le $PUs ] ; do
   choose_host
   ./RemoteComponentControl ./Lab-User.config $CHOOSE_HOST ./ComponentControl.config PU TestPU-$i start \
      -poolhandle=$POOLHANDLE -pause=$INTERHRESTIME -quiet -statsfile=TestPU-$i.data -statsinterval=250
   let i=$i+1
done


# ====== Run tests ==========================================================
echo "   + Running test ..."
sleep $DURATION


# ====== Stop scenario ======================================================

# ------ Stop PUs -----------------------------------------------------------
echo "   + Stopping PUs ..."
CHOOSE_HOST_LAST=0
i=1 ; while [ $i -le $PUs ] ; do
   choose_host
   ./RemoteComponentControl ./Lab-User.config $CHOOSE_HOST ./ComponentControl.config PU TestPU-$i stop
   fetchfile $CHOOSE_HOST "TestPU-$i.data" "$PREFIX/TestPU-$i.data"
   let i=$i+1
done
sleep 1
 
# ------ Stop PEs -----------------------------------------------------------
echo "   + Stopping PEs ..."
CHOOSE_HOST_LAST=0
i=1 ; while [ $i -le $PEs ] ; do
   choose_host
   ./RemoteComponentControl ./Lab-User.config $CHOOSE_HOST ./ComponentControl.config PE TestPE-$i stop
   let i=$i+1
done
sleep 2

# ------ Stop PR ------------------------------------------------------------
echo "   + Stopping PR ..."
./RemoteComponentControl ./Lab-User.config $HOST_PR ./ComponentControl.config PR TestPR-1 stop
fetchfile $HOST_PR "TestPR-1.data" "$PREFIX/TestPR-1.data"


date >"$PREFIX/completed.txt"
echo "Fertig!"
