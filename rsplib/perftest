#!/bin/bash
#
# Thomas Dreibholz's PlanetLab Script Collection
# Copyright (C) 2005-2006 by Thomas Dreibholz, dreibh@exp-math.uni-essen.de
#
# $Id$
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# Contact: dreibh@iem.uni-due.de
#


PREFIX=$1
PEs=$2
PUs=$3
REREGINTERVAL=$4
INTERHRESTIME=$5

PARAMS=$PREFIX-$PEs-$PUs-$REREGINTERVAL-$INTERHRESTIME


POOLHANDLE="EchoPool"

SSH_USER="dreibh"
SSH_KEY=~/.ssh/id_dsa


startproc ()
{
   PROCNAME=$1
   PROCCALL=$2
   SERVER=$3

   if [ -e $PIDFILE ]; then
      echo "ERROR: PID file $PIDFILE already exists!"
      exit 1
   fi

   PIDFILE=$PROCNAME-$SERVER.pid
   ssh -t -t -C -i $SSH_KEY -oStrictHostKeyChecking=no -oPasswordAuthentication=no $SSH_USER@$SERVER "\
      cd src/rsplib2/rsplib && $PROCCALL" &
   echo $! >$PIDFILE
}

stopproc ()
{
   PROCNAME=$1
   SERVER=$2

   PIDFILE=$PROCNAME-$SERVER.pid
   if [ -e $PIDFILE ] ; then
      PID=`cat $PIDFILE`
      if ps -p `cat $PIDFILE` | grep ssh 1>/dev/null 2>/dev/null ; then
         echo "Processing $PIDFILE: sending SIGINT to $PID ..."
         kill $PID
         # echo STOP $! -- $PID -- $PIDFILE >$RANDOM-$RANDOM.td0
      else
         echo "Processing $PIDFILE: process is already gone."
         # echo DEAD $! -- $PIDFILE >$RANDOM-$RANDOM.td0
      fi
      rm $PIDFILE
   fi

}

fetchfile ()
{
   SERVER=$1
   INFILE=$2
   OUTFILE=$3
   scp -q -i $SSH_KEY $SSH_USER@$SERVER:"~/src/rsplib2/rsplib/$INFILE" $OUTFILE
}



mkdir $PREFIX


# ------ Start PUs ----------------------------------------------------------
i=1
while [ $i -le $PUs ] ; do
   stopproc "TestPU-$i" localhost
   startproc "TestPU-$i" "./hrestest -poolhandle=$POOLHANDLE -pause=$INTERHRESTIME -quiet -statsfile=TestPU-$i.data -statsinterval=250" localhost
   let i=$i+1
done


# ------ Stop PUs -----------------------------------------------------------
sleep 5
i=1
while [ $i -le $PUs ] ; do
   stopproc "TestPU-$i" localhost
   fetchfile localhost "TestPU-$i.data" "$PREFIX/TestPU-$i.data"
   let i=$i+1
done

# 
# 
# . ./planetlab-config
# 
# TESTID=fractal-scenario2
# 
# PR_LIST=`cat pe-america.hosts pe-europe.hosts|grep "^[a-Z0-9]"|sort -u`   # ACHTUNG: Eindeutigkeit unbedingt notwendig!!!
# PE_LIST=`cat planetlab.hosts|grep "^[a-Z0-9]"|sort -u`
# #PE_LIST=`cat pe-europe.hosts|grep "^[a-Z0-9]"|sort -u`
# 
# PR_MISCOPT="-cspinterval=1000 -loglevel=4"
# PE_MISCOPT="-cspinterval=0 -fractal -fgpfailureafter=0 -rereginterval=30000 -policy=RoundRobin -loglevel=3 "
# 
# 
# resetAll ()
# {
#    ./stop-processes Registrar
#    ./stop-processes PoolElement
# }
# 
# startNetwork ()
# {
#    optPeers=""
#    for peer in $PR_LIST ; do
#       optPeers="$optPeers -peer=$peer:3864"
#    done
#    number=1
#    for pr in $PR_LIST ; do
#       echo "Starting PR on $pr ..."
#       ./start-process "Registrar-$number" "./rootshell -c \"./registrar $OPT_CSP $PR_MISCOPT -identifier=100$number -asap=0.0.0.0:3863 -enrp=0.0.0.0:3864 $optPeers \" >$TESTID-pr$number-$pr.log 2>&1" $pr &
#       let number=$number+1
#    done
# 
#    optRegistrars=""
#    for pr in $PR_LIST ; do
#       optRegistrars="$optRegistrars -registrar=$pr:3863"
#    done
#    number=1
#    for pe in $PE_LIST ; do
#       echo "Starting PE on $pe ..."
#       ./start-process "PoolElement-$number" "./rootshell -c \"./server $OPT_CSP $PE_MISCOPT $optRegistrars -identifier=$number \" >$TESTID-pe$number-$pe.log 2>&1" $pe &
#       let number=$number+1
#    done
# }
# 
# stopNetwork ()
# {
#    number=1
#    for pe in $PE_LIST ; do
#       ./stop-process "PoolElement-$number" $pe
#       let number=$number+1
#    done
#    number=1
#    for pr in $PR_LIST ; do
#       ./stop-process "Registrar-$number" $pr
#       let number=$number+1
#    done
# }
# 
# 
# 
# if [ $# -lt 1 ] ; then
#    echo "Usage: fractal-scenario2 [start|stop|reset|user]"
# fi
# 
# if [ "x$1" = "xstart" ] ; then
#    startNetwork
# elif [ "x$1" = "xstop" ] ; then
#    stopNetwork
# elif [ "x$1" = "xreset" ] ; then
#    echo "Resetting everything!"
#    resetAll
# elif [ "x$1" = "xuser" ] ; then
#    optRegistrars=""
#    for pr in $PR_LIST ; do
#       optRegistrars="$optRegistrars -registrar=$pr:3863"
#    done
#    shift
#    ./fractalpooluser $optRegistrars -loglevel=1 $OPT_CSP $@
# else
#    echo "ERROR: Bad parameter!"
# fi
