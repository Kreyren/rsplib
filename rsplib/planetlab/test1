#!/bin/bash
# $Id: test1 1863 2008-08-26 13:24:38Z dreibh $
#
# Thomas Dreibholz's PlanetLab Script Collection
# Copyright (C) 2005-2010 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@iem.uni-due.de


. ./planetlab-config

PRsPerRegion=2
PR_LIST=`( head -n$PRsPerRegion pr-europe.hosts | sort -u ; head -n$PRsPerRegion pr-america.hosts | sort -u ; head -n$PRsPerRegion pr-asia.hosts | sort -u )`
PE_LIST=`cat great-planetlab.hosts|grep "^[a-Z0-9]"|sort -u`
# PE_LIST=`cat pe-europe.hosts|grep "^[a-Z0-9]"|sort -u`


TESTID=test1
# -supporttakeoversuggestion -
PR_MISCOPT="-supporttakeoversuggestion -asapannounce=off -enrpannounce=off -endpointkeepalivetransmissioninterval=30000 -endpointkeepalivetimeoutinterval=15000 -cspinterval=1000 -loglevel=5"
PE_MISCOPT="-asapannounce=off -cspinterval=0 -fractal -fgpfailureafter=0 -rereginterval=10000 -policy=RoundRobin -loglevel=5"
PU_MISCOPT=""
VALGRIND=""  # "/usr/bin/valgrind  -v --tool=memcheck --leak-check=yes --show-reachable=no --leak-resolution=high --num-callers=40 --freelist-vol=4000000"

resetAll ()
{
   ./stop-processes Registrar
   ./stop-processes PoolElement
}

startNetwork ()
{
   optPeers=""
   for peer in $PR_LIST ; do
      optPeers="$optPeers -peer=$peer:9901"
   done
   number=1
   for pr in $PR_LIST ; do
      echo "Starting PR on $pr ..."
      ./start-process "Registrar-$number" "./rootshell $VALGRIND ./registrar $OPT_CSP $PR_MISCOPT -asap=0.0.0.0:3863 -enrp=0.0.0.0:9901 $optPeers -statsfile=statistics-$pr.data -statsinterval=1000 -actionlogfile=actions-$pr.data >$TESTID-pr$number-$pr.log 2>&1" $pr &
      let number=$number+1
   done

   optRegistrars=""
   i=1
   for pr in $PR_LIST ; do
      if [ $i -le $PRsPerRegion ] ; then
         optRegistrars="$optRegistrars -registrar=$pr:3863"
      fi
      let i=$i+1
   done
   echo "PR-OPT: $optRegistrars"
   number=1
   for pe in $PE_LIST ; do
      echo "Starting PE on $pe ..."
      ./start-process "PoolElement-$number" "./rootshell ./server $OPT_CSP $PE_MISCOPT $optRegistrars >$TESTID-pe$number-$pe.log 2>&1" $pe &
      let number=$number+1
   done
}

stopNetwork ()
{
   number=1
   for pe in $PE_LIST ; do
      ./stop-process "PoolElement-$number" $pe
      let number=$number+1
   done
   number=1
   for pr in $PR_LIST ; do
      ./stop-process "Registrar-$number" $pr
      let number=$number+1
   done
}



if [ $# -lt 1 ] ; then
   echo "Usage: test1 [start|stop|reset|user]"
fi

if [ "x$1" = "xstart" ] ; then
   startNetwork
elif [ "x$1" = "xstop" ] ; then
   stopNetwork
elif [ "x$1" = "xreset" ] ; then
   echo "Resetting everything!"
   resetAll
elif [ "x$1" = "xuser" ] ; then
   optRegistrars=""
   for pr in $PR_LIST ; do
      optRegistrars="$optRegistrars -registrar=$pr:3863"
   done
   shift
   cmd="../fractalpooluser $optRegistrars -loglevel=1 $PU_MISCOPT $OPT_CSP -configdir=../fgpconfig $@"
   echo "# $cmd"
   $cmd
else
   echo "ERROR: Bad parameter!"
fi
