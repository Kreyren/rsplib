# $Id$
# --------------------------------------------------------------------------
#
#              //===//   //=====   //===//   //       //   //===//
#             //    //  //        //    //  //       //   //    //
#            //===//   //=====   //===//   //       //   //===<<
#           //   \\         //  //        //       //   //    //
#          //     \\  =====//  //        //=====  //   //===//    Version II
#
# ------------- An Efficient RSerPool Prototype Implementation -------------
#
# Copyright (C) 2002-2010 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@iem.uni-due.de


# ###### Basic setup ########################################################
AC_INIT(rsplib/rspbasicmode.c)
AC_CONFIG_AUX_DIR(admin)
AC_CONFIG_MACRO_DIR([m4])
AC_CANONICAL_HOST
AM_INIT_AUTOMAKE(rsplib, 2.7.6~test2)
AC_PREFIX_DEFAULT(/usr/local)
if test "x$prefix" = "xNONE"; then
  prefix=$ac_default_prefix
  ac_configure_args="$ac_configure_args --prefix $prefix"
fi
AM_CONFIG_HEADER(config.h)


# ###### Checks for programs ################################################
AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_LIBTOOL


# ###### Options ############################################################
AC_ARG_WITH([max-loglevel],
[AS_HELP_STRING([--with-max-loglevel],[Highest supported logging level @<:@9@:>@])],
[max_loglevel=${withval}],
[max_loglevel=9])
AC_DEFINE_UNQUOTED([MAX_LOGLEVEL], ${max_loglevel}, [Maximum logging level])

AC_ARG_ENABLE([csp],
              [  --enable-csp            enable CSP support ][default=yes]],
              enable_csp=$enableval, enable_csp=yes)
if test "${enable_csp}" = "yes"; then
   AC_DEFINE(ENABLE_CSP, 1, "Define to 1 if CSP is supported.")
fi

AC_ARG_ENABLE([hsmgtverify],
              [  --enable-hsmgtverify    enable handlespace management verification  [default=no]],
              enable_hsmgtverify=$enableval, enable_hsmgtverify=no)
if test "${enable_hsmgtverify}" = "yes"; then
   AC_DEFINE(VERIFY, 1, "Define to 1 if handlespace management verification is turned on.")
fi

AC_ARG_ENABLE([qt],
              [  --enable-qt             enable QT-based examples ][default=no]],
              enable_qt=$enableval, enable_qt=no)

AC_ARG_ENABLE([maintainer-mode],
              [  --enable-maintainer-mode enable maintainer mode ][default=yes]],
              enable_maintainer_mode=$enableval, enable_maintainer_mode=yes)

AC_ARG_ENABLE([registrar-statistics],
              [  --enable-registrar-statistics enable registrar statistics logging option (requires libbz2) ][default=yes]],
              enable_registrar_statistics=$enableval, enable_registrar_statistics=yes)
if test "${enable_registrar_statistics}" = "yes"; then
   AC_DEFINE(ENABLE_REGISTRAR_STATISTICS, 1, "Define to 1 to enable registrar statistics logging option.")
fi
AM_CONDITIONAL(ENABLE_REGISTRAR_STATISTICS, test x$enable_registrar_statistics = xyes)

AC_ARG_ENABLE([test-programs],
              [  --enable-test-programs  build with batch test programs ][default=no]],
              enable_test_programs=$enableval, enable_test_programs=no)
AM_CONDITIONAL(BUILD_TEST_PROGRAMS, test x$enable_test_programs = xyes)


# ###### Check for sin6_scope_id of sockaddr_in6 ############################
if test "$cv_ipv6" = yes; then
   AC_MSG_CHECKING(whether struct sockaddr_in6 has a sin6_scope_id field)
   AC_TRY_COMPILE([#include <sys/types.h>
                   #include <netinet/in.h>],
                  [static struct sockaddr_in6 ac_i;int ac_j = sizeof(ac_i.sin6_scope_id);],
                  [AC_MSG_RESULT(yes)
                   AC_DEFINE(HAVE_SIN6_SCOPE_ID, 1, "Define to 1 if sin6_scope_id is supported.")],
                  AC_MSG_RESULT(no))
fi


# ###### Operating system checks ############################################
case $host_os in
bsdi*)
    CFLAGS="$CFLAGS -DBSDI"
    thread_LIBS="-lpthread"
    CFLAGS="$CFLAGS `glib-config --cflags`"
    LDFLAGS="$LDFLAGS `glib-config --libs`"
    ;;
freebsd*)
    CFLAGS="$CFLAGS -DFreeBSD -D_PTHREADS -pthread -I/usr/local/include -DHAVE_CONNECTX_WITH_ID"
    CXXFLAGS="$CXXFLAGS -DFreeBSD -D_PTHREADS -pthread -I/usr/local/include"
    LDFLAGS="$LDFLAGS -L/usr/local/v6/lib"
    thread_LIBS=""
    ;;
hpux*)
    CFLAGS="$CFLAGS -DSNAKE"
    test -z "$GCC" && TRY_CFLAGS="$TRY_CFLAGS -Wp,-H600000"
    thread_LIBS="-lpthread"
   ;;
linux*)
    CFLAGS="$CFLAGS -DLINUX -D_GNU_SOURCE -std=c99"
    CXXFLAGS="$CXXFLAGS -DLINUX -D_GNU_SOURCE -std=c++98"
    LDFLAGS="$LDFLAGS"
    thread_LIBS="-lpthread"
    ;;
openbsd*)
    LIBS="$LIBS -lcompat"
    thread_LIBS="-lpthread"
    ;;
solaris*)
    CFLAGS="$CFLAGS -D_XPG4_2 -D__EXTENSIONS__ -DSOLARIS -D__sun -DSUN -DSUNOS_5"
    CXXFLAGS="$CXXFLAGS -D_XPG4_2 -D__EXTENSIONS__ -DSOLARIS -D__sun -DSUN -DSUNOS_5"
    thread_LIBS="-lpthread"
    LDFLAGS="$LDFLAGS -lsocket -lnsl -lrt -lresolv"
    ;;
sunos4*)
    CFLAGS="$CFLAGS -DSUN -DSUN4"
    thread_LIBS="-lpthread"
    ;;
darwin*)
    CFLAGS="$CFLAGS -DDARWIN -DUSE_SELECT -DHAVE_CONNECTX_WITH_ID"
    CXXFLAGS="$CXXFLAGS -DDARWIN"
    thread_LIBS="-lpthread"
    ;;
esac
AC_SUBST(thread_LIBS)


# ###### Networking declarations ############################################
AC_CHECK_HEADERS(sys/types.h sys/socket.h netinet/in.h)

AC_MSG_CHECKING(for socklen_t)
AC_TRY_COMPILE([#ifdef HAVE_SYS_TYPES_H
                #include <sys/types.h>
                #endif
                #include <sys/socket.h>],
               [socklen_t x = 1; return 0;],
               [AC_MSG_RESULT(yes)],
               [AC_MSG_RESULT(int)
                AC_DEFINE(socklen_t, int, [Define a type for socklen_t.])])

AC_MSG_CHECKING(if stderr is a variable of type FILE* and not a macro)
AC_TRY_COMPILE([#include <stdio.h>],
               [FILE** stdlog = &stderr],
               [AC_DEFINE(HAVE_STDERR_FILEPTR, 1, "Define to 1 if stderr is a pointer.")
                AC_MSG_RESULT(yes)],
               [AC_MSG_RESULT(no)])

AC_CHECK_MEMBER(struct sockaddr_in.sin_len,
                AC_DEFINE(HAVE_SIN_LEN, 1, [Define this if your IPv4 has sin_len in sockaddr_in struct.]),,
                [#ifdef HAVE_SYS_TYPES_H
                 #include <sys/types.h>
                 #endif
                 #include <netinet/in.h>])

AC_CHECK_MEMBER(struct sockaddr_in6.sin6_len,
                AC_DEFINE(HAVE_SIN6_LEN, 1, [Define this if your IPv6 has sin6_len in sockaddr_in6 struct.]),,
                [#ifdef HAVE_SYS_TYPES_H
                 #include <sys/types.h>
                 #endif
                 #include <netinet/in.h>])

AC_CHECK_FUNCS(socket, , AC_CHECK_LIB(socket, socket))


# ###### Check if kernel SCTP should be used ################################
AC_ARG_ENABLE([kernel-sctp],
              [  --enable-kernel-sctp    use kernel SCTP instead of sctplib][default=yes]],
              enable_kernel_sctp=$enableval, enable_kernel_sctp=yes)


# ###### Check for SCTP implementation ######################################
if test "x$enable_kernel_sctp" = "xno"; then

   # ====== sctplib =========================================================
   ac_sctplib_includes=no ac_sctplib_libraries=no ac_sctplib_bindir=no
   sctplib_libraries=""
   sctplib_includes=""
   AC_ARG_WITH(sctplib,
      [  --with-sctplib=DIR      where the root of sctplib is installed ],
      [  ac_sctplib_includes="$withval"/include
         ac_sctplib_libraries="$withval"/lib
         ac_sctplib_bindir="$withval"/bin
      ])

   if test "$ac_sctplib_libraries" = "no"; then
      ac_sctplib_defaultdir="/usr/local"
      ac_sctplib_includes="$ac_sctplib_defaultdir"/include
      ac_sctplib_libraries="$ac_sctplib_defaultdir"/lib
      ac_sctplib_bindir="$ac_sctplib_defaultdir"/bin
   fi

   if test ! -e "$ac_sctplib_includes/sctp.h" ; then
      AC_MSG_ERROR([No sctplib installation found ($ac_sctplib_includes/sctp.h)!])
   fi
   if test ! -e $ac_sctplib_libraries/libsctplib.a ; then
      AC_MSG_ERROR([No sctplib installation found ($ac_sctplib_libraries/libsctplib.a)!])
   fi

   # ====== socketapi =======================================================
   ac_socketapi_includes=no ac_socketapi_libraries=no ac_socketapi_bindir=no
   socketapi_libraries=""
   socketapi_includes=""
   AC_ARG_WITH(socketapi,
      [  --with-socketapi=DIR    where the root of socketapi is installed ],
      [  ac_socketapi_includes="$withval"/include
         ac_socketapi_libraries="$withval"/lib
         ac_socketapi_bindir="$withval"/bin
      ])

   if test "$ac_socketapi_libraries" = "no"; then
      ac_socketapi_defaultdir="/usr/local"
      ac_socketapi_includes="$ac_socketapi_defaultdir"/include
      ac_socketapi_libraries="$ac_socketapi_defaultdir"/lib
      ac_socketapi_bindir="$ac_socketapi_defaultdir"/bin
   fi

   if test ! -e $ac_socketapi_libraries/libsctpsocket.a ; then
      AC_MSG_ERROR([No socketapi installation found ($ac_socketapi_libraries/libsctpsocket.a)!])
   fi

   # In maintainer mode, use static linking for sctplib/socketapi!
   if test "$enable_maintainer_mode" = "yes"; then
      sctplib_LIBS="$ac_sctplib_libraries/libsctplib.a"
      socketapi_LIBS="$ac_socketapi_libraries/libsctpsocket.a -lstdc++"
   else
      sctplib_LIBS="-L$ac_sctplib_libraries -lsctplib"
      socketapi_LIBS="-L$ac_socketapi_libraries -lsctpsocket -lstdc++"
   fi

   AC_DEFINE(HAVE_SPP_FLAGS, 1, [Define this if you support version 10 if the API ID.])

   # ====== Check for glib ==================================================
   AM_PATH_GLIB_2_0(2.4.0, , AC_MSG_ERROR(GLib installation not found.))

   CFLAGS="$CFLAGS $GLIB_CFLAGS"
   CPPFLAGS="$CPPFLAGS $GLIB_CFLAGS"
   glib_LIBS="$GLIB_LIBS"

   # ====== Version compatibility test ======================================
   oldLIBS=$LIBS
   LIBS="$LIBS $socketapi_LIBS $sctplib_LIBS $glib_LIBS $thread_LIBS"
   AC_MSG_CHECKING([socketapi library version])
   AC_TRY_RUN([
#include <stdio.h>
#include "ext_socket.h"

int main(int argc, char** argv)
{
   unsigned int version = socketAPIGetVersion();
   printf("Version is %u.%04x\n", (version >> 16), version & 0xffff);
   if(version >= 0x21100) {
      return(0);
   }
   return(1);
}
], socketapi_version=good, socketapi_version=bad, socketapi_version=cross)

   case $socketapi_version in
   good)
      ;;
   bad|*)
      AC_MSG_ERROR([You need at least version 2.110 of the socketapi library!])
      ;;
   esac

   AC_DEFINE(HAVE_SCTP_SENDMSG, 1, [Define to 1 if you have the `sctp_sendmsg' function.])
   AC_DEFINE(HAVE_SCTP_CONNECTX, 1, [Define to 1 if you have the `sctp_connectx' function.])
   AC_DEFINE(HAVE_SCTP_SEND, 1, [Define to 1 if you have the `sctp_send' function.])
   AC_DEFINE(HAVE_SCTP_SENDX, 1, [Define to 1 if you have the `sctp_sendx' function.])
   AC_DEFINE(HAVE_SPP_FLAGS, 1, [Define this if you support version 10 if the API ID.])
   AC_DEFINE(HAVE_CONNECTX_WITH_ID, 1, [Define to 1 if sctp_connectx has associd parameter.])
   AC_DEFINE(HAVE_SCTP_DELAYED_SACK, 1, [Define to 1 if SCTP_DELAYED_SACK with sctp_sack_info is available.])

   LIBS=$oldLIBS
   # ========================================================================

else
   # ====== Kernel SCTP =====================================================
   oldLIBS=$LIBS
   AC_CHECK_FUNCS(sctp_sendmsg, ,  AC_CHECK_LIB(sctp, sctp_sendmsg))
   AC_CHECK_FUNCS(sctp_connectx, , AC_CHECK_LIB(sctp, sctp_connectx))
   AC_CHECK_FUNCS(sctp_send, ,     AC_CHECK_LIB(sctp, sctp_send))
   AC_CHECK_FUNCS(sctp_sendx, ,    AC_CHECK_LIB(sctp, sctp_sendx))
   AC_CHECK_MEMBER(struct sctp_paddrparams.spp_flags,
                   AC_DEFINE(HAVE_SPP_FLAGS, 1, [Define this if you support version 10 if the API ID.]),,
                   [#ifdef HAVE_SYS_TYPES_H
                   #include <sys/types.h>
                   #endif
                   #ifdef HAVE_NETINET_SCTP_H
                   #include <netinet/sctp.h>
                   #endif])
   AC_MSG_CHECKING(whether sctp_connectx has an associd parameter)
   AC_TRY_COMPILE([#include <sys/types.h>
                   #include <netinet/sctp.h>],
                  [sctp_assoc_t id;
                   int result = sctp_connectx(0, NULL, 0, &id);],
                  [AC_MSG_RESULT(yes)
                   AC_DEFINE(HAVE_CONNECTX_WITH_ID, 1, [Define to 1 if sctp_connectx has associd parameter.])],
                  AC_MSG_RESULT(no))
   AC_MSG_CHECKING(whether SCTP_DELAYED_SACK with sctp_sack_info is available)
   AC_TRY_COMPILE([#include <sys/types.h>
                   #include <netinet/sctp.h>],
                  [struct sctp_sack_info sctpSACKInfo;
                   int opt = SCTP_DELAYED_SACK;],
                  [AC_MSG_RESULT(yes)
                   AC_DEFINE(HAVE_SCTP_DELAYED_SACK, 1, [Define to 1 if SCTP_DELAYED_SACK with sctp_sack_info is available.])],
                  AC_MSG_RESULT(no))
   LIBS=$oldLIBS

   # ====== Check for Valgrind ==============================================
   # Needed to avoid false positives for sctp_getladdrs()/sctp_getpaddrs()
   AC_CHECK_HEADERS([valgrind/valgrind.h])
   AC_CHECK_HEADERS([valgrind/memcheck.h])

   # ====== Check for SCTP library linker parameter =========================
   sctplib_LIBS=""
   socketapi_LIBS=""
   sctp_okay=0
   AC_CHECK_LIB(sctp, sctp_sendmsg, [
      socketapi_LIBS="-lsctp"
      sctp_okay=1])
   if test $sctp_okay -ne 1 ; then
      AC_CHECK_LIB(c, sctp_sendmsg, [
         socketapi_LIBS=""
         sctp_okay=1])
   fi

   AC_MSG_CHECKING([whether library parameter for SCTP functions])
   if test $sctp_okay -ne 1 ; then
      AC_MSG_ERROR([Do not know where to find SCTP functions! Missing libsctp?])
   else
      AC_MSG_RESULT([appending "$socketapi_LIBS"])
   fi

   glib_LIBS=""
   CFLAGS="$CFLAGS -DHAVE_KERNEL_SCTP"
   CXXFLAGS="$CXXFLAGS -DHAVE_KERNEL_SCTP"
fi
AC_SUBST(sctplib_LIBS)
AC_SUBST(socketapi_LIBS)
AC_SUBST(glib_LIBS)


# ###### Check for IEEE-754 complient float-point handling ##################
AC_MSG_CHECKING([for floating point type])
AC_TRY_RUN([
#include <stdio.h>

union DoubleIntUnion
{
   double             Double;
   unsigned long long Integer;
};


/*
void hexdump(const void* ptr, const size_t length)
{
   const unsigned char* cptr = (const unsigned char*)ptr;
   size_t               i;

   for(i = 0;i < length;i++) {
      printf("%02x ", cptr[i]);
   }
   puts("");
}
*/

int main ()
{
   union DoubleIntUnion value;

   value.Double = 0.0;

   if(value.Integer != 0ULL) {
      /* puts("Math is non-IEEE (check 1)!\n"); */
      return(1);
   }

   value.Double = 1000.5;
   if(value.Integer != 0x408f440000000000ULL) {
      /* puts("Math is non-IEEE (check 2)!\n"); */
      return(1);
   }

   value.Double = -1000.5;
   if(value.Integer != 0xc08f440000000000ULL) {
      /* puts("Math is non-IEEE (check 3)!\n"); */
      return(1);
   }

   /* puts("Math is IEEE\n"); */
   return(0);
}
], IEEEFP=ok, IEEEFP=broken, IEEEFP=cross)


case $IEEEFP in
ok)
    AC_MSG_RESULT(IEEE)
    AC_DEFINE(HAVE_IEEE_FP, 1, [IEEE compliant float-point handling])
    ;;
cross)
    AC_MSG_RESULT([cross-compiling, assuming IEEE])
    AC_DEFINE(HAVE_IEEE_FP)
    ;;
*|broken)
    AC_MSG_RESULT([non IEEE])
    ;;
esac


# ###### Check for Qt, if it is requested ###################################
AM_CONDITIONAL(BUILD_QT_PROGRAMS, test x$enable_qt = xyes)
if test "${enable_qt}" = "yes"; then
   TD_CHECK_QT4
   AC_DEFINE(ENABLE_QT, 1, [QT is usable])
else
   echo "Skipping checks for QT, since it is not requested."
fi


# ###### Check for BZip2 library ############################################
oldLIBS=$LIBS
LIBS=
hasBZ2=yes   # Assume "yes"; will be set to "no" when one of the test fails.
AC_CHECK_HEADERS([bzlib.h], [], [hasBZ2=no])
AC_SEARCH_LIBS([BZ2_bzReadOpen], [bz2], [], [hasBZ2=no])
bz2_LIBS=$LIBS
AC_SUBST(bz2_LIBS)
LIBS=$oldLIBS

if test "${enable_registrar_statistics}" = "yes"; then
   if test "${hasBZ2}" = "no"; then
      AC_MSG_ERROR([No bzlib developer files found, but registrar statistics requested (--enable-registrar-statistics parameter)!])
   fi
fi


# ###### Maintainer mode ####################################################
if test "$enable_maintainer_mode" = "yes"; then
   CFLAGS="$CFLAGS -Wall -g3 -O0 -D_REENTRANT -D_THREAD_SAFE -DINCLUDE_SIMPLEREDBLACKTREE -DUSE_SIMPLEREDBLACKTREE"
   CXXFLAGS="$CXXFLAGS -Wall -g3 -O0 -D_REENTRANT -D_THREAD_SAFE -DINCLUDE_SIMPLEREDBLACKTREE -DUSE_SIMPLEREDBLACKTREE"
else
   CFLAGS="$CFLAGS -Wall -g -D_REENTRANT -D_THREAD_SAFE -DINCLUDE_SIMPLEREDBLACKTREE -DUSE_SIMPLEREDBLACKTREE"
   CXXFLAGS="$CXXFLAGS -Wall -g -D_REENTRANT -D_THREAD_SAFE -DINCLUDE_SIMPLEREDBLACKTREE -DUSE_SIMPLEREDBLACKTREE"
fi


# ###### Version information ################################################
RSPLIB_CURRENT=2
RSPLIB_REVISION=8
RSPLIB_AGE=0

AC_SUBST(RSPLIB_CURRENT)
AC_SUBST(RSPLIB_REVISION)
AC_SUBST(RSPLIB_AGE)
AC_SUBST(RSPLIB_RELEASE)


# ###### Makefiles ##########################################################
AC_OUTPUT(Makefile rsplib/Makefile rsplib/wireshark/Makefile rsplib/fgpconfig/Makefile docs/Makefile )


# ###### Configuration results ##############################################
echo ""
echo "The rsplib package has been configured with the following options:"
echo ""
echo "   Build with Maintainer Mode      : $enable_maintainer_mode"
echo "   Build with Batch Test Programs  : $enable_test_programs"
echo "   Build with Kernel SCTP          : $enable_kernel_sctp"
echo "   Build with CSP Support          : $enable_csp"
echo "   Build with Registrar Statistics : $enable_registrar_statistics"
echo "   Build with Qt-based Examples    : $enable_qt"
echo "   Maximum loglevel                : $max_loglevel"
echo "   Build with HS Mgt. Debugging    : $enable_hsmgtverify"
echo ""
echo "   sctplib Libraries               : $sctplib_LIBS"
echo "   socketapi Libraries             : $socketapi_LIBS"
echo "   glib Libraries                  : $glib_LIBS"
echo "   Thread Libraries                : $thread_LIBS"
echo "   BZip2 Libraries                 : $bz2_LIBS"
echo ""
echo "   CFLAGS                          : $CFLAGS"
echo "   CXXFLAGS                        : $CXXFLAGS"
echo "   LDFLAGS                         : $LDFLAGS"
echo "   LIBS                            : $LIBS"
echo "   glib_CFLAGS                     : $glib_CFLAGS"
echo ""
echo "   QTDIR                           : $QTDIR"
echo "   MOC                             : $MOC"
echo "   QT_CXXFLAGS                     : $QT_CXXFLAGS"
echo "   QT_LDFLAGS                      : $QT_LDADD"

